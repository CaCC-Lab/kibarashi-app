name: Dependencies Check

on:
  schedule:
    # 毎週月曜日の9:00 UTCに実行
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Update type'
        required: true
        default: 'security'
        type: choice
        options:
          - security
          - minor
          - all

env:
  NODE_VERSION: '20.x'

jobs:
  # 依存関係のセキュリティチェック
  security-check:
    name: Security Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit (Root)
        run: |
          echo "🔍 ルートパッケージのセキュリティチェック"
          npm audit --audit-level=high

      - name: Run security audit (Frontend)
        run: |
          echo "🔍 フロントエンドのセキュリティチェック"
          cd frontend && npm audit --audit-level=high

      - name: Run security audit (Backend)
        run: |
          echo "🔍 バックエンドのセキュリティチェック"
          cd backend && npm audit --audit-level=high

      - name: Check for outdated packages
        run: |
          echo "📅 古いパッケージのチェック"
          npm outdated || true
          cd frontend && npm outdated || true
          cd ../backend && npm outdated || true

  # 依存関係の自動更新（セキュリティ修正のみ）
  auto-update:
    name: Auto-update Dependencies
    runs-on: ubuntu-latest
    needs: [security-check]
    if: github.event.inputs.update_type == 'security' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update security vulnerabilities (Root)
        run: |
          echo "🔧 ルートパッケージのセキュリティ修正"
          npm audit fix --only=prod || true

      - name: Update security vulnerabilities (Frontend)
        run: |
          echo "🔧 フロントエンドのセキュリティ修正"
          cd frontend && npm audit fix --only=prod || true

      - name: Update security vulnerabilities (Backend)
        run: |
          echo "🔧 バックエンドのセキュリティ修正"
          cd backend && npm audit fix --only=prod || true

      - name: Run tests after updates
        run: |
          echo "🧪 更新後のテスト実行"
          npm run test:frontend || echo "⚠️ フロントエンドテスト失敗"
          npm run test:backend || echo "⚠️ バックエンドテスト失敗"

      - name: Check if there are changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "📝 変更が検出されました"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ 変更はありません"
          fi

      - name: Create Pull Request
        if: steps.verify-changed-files.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'fix: セキュリティ脆弱性の修正'
          title: '🔒 セキュリティ脆弱性の自動修正'
          body: |
            ## 概要
            依存関係のセキュリティ脆弱性を自動的に修正しました。
            
            ## 変更内容
            - `npm audit fix` でセキュリティ修正を適用
            - テストが成功していることを確認済み
            
            ## 確認事項
            - [ ] CIパイプラインが成功すること
            - [ ] アプリケーションが正常に動作すること
            
            ---
            🤖 このPRは自動生成されました。
          branch: security-updates
          delete-branch: true

  # 依存関係のライセンスチェック
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install license checker
        run: npm install -g license-checker

      - name: Install dependencies
        run: npm ci

      - name: Check licenses (Frontend)
        run: |
          echo "📜 フロントエンドのライセンスチェック"
          cd frontend && license-checker --summary

      - name: Check licenses (Backend)
        run: |
          echo "📜 バックエンドのライセンスチェック"
          cd backend && license-checker --summary

      - name: Check for problematic licenses
        run: |
          echo "⚠️ 問題のあるライセンスのチェック"
          # 商用利用で問題のあるライセンスをチェック
          cd frontend && license-checker --excludeLicenses 'MIT;Apache-2.0;ISC;BSD-2-Clause;BSD-3-Clause;Unlicense;CC0-1.0' --failOn 'GPL;AGPL;LGPL;WTFPL;NPSL' || true
          cd ../backend && license-checker --excludeLicenses 'MIT;Apache-2.0;ISC;BSD-2-Clause;BSD-3-Clause;Unlicense;CC0-1.0' --failOn 'GPL;AGPL;LGPL;WTFPL;NPSL' || true

  # レポート生成
  report:
    name: Generate Dependency Report
    runs-on: ubuntu-latest
    needs: [security-check, license-check]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate dependency tree
        run: |
          echo "🌳 依存関係ツリーを生成"
          npm ls --all > dependency-tree.txt || true
          cd frontend && npm ls --all > ../frontend-dependencies.txt || true
          cd ../backend && npm ls --all > ../backend-dependencies.txt || true

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            dependency-tree.txt
            frontend-dependencies.txt
            backend-dependencies.txt
          retention-days: 30